DEPLOYMENT GUIDLINES:

To deploy,first you need to run the script1.sh script on a remote server
then you need to exit the remote server, and then ssh back in. This is done because the environment variables will not be set until you do so. Afterwards, you can run script2.sh to complete the deployment.


You will be prompted to edit two files during the deployment process.
You will be first prompted when running script1.sh script.
The first is the environment file, please append the following:

PORT="3000"
MONGODB_URL="mongodb+srv://admin:admin@projectx-test-d5geh.mongodb.net/projectx?retryWrites=true&w=majority"
NODE_ENV="production"


The second prompt will be during running the script1.sh script.
The second will be the nginx configuration file, please copy this and
paste it there:

server {
  listen 80 default_server;
  server_name _;

  location / {
    root /opt/FrontEnd/spotify/build;
    try_files $uri /index.html;
  }
  
  location /images/ {
    root /home/ubuntu;
  }

  location /api/ {
    proxy_pass http://localhost:3000/;
  }
}

server {
  listen 4000;
  server_name _;


  location / {
    root /home/ubuntu/Downloads/FrontEnd/spotify/build;
    try_files $uri /index.html;
  }


  location /api/ {
    proxy_pass http://localhost:5000/;
  }
}


Note that in the very end, pm2 startup is going to generate a command that you should copy and paste in order to configure pm2 to start at boot, but I already copied it and it should be performed automatically given that the user name is ubuntu




When you try to install Jenkins, you'll be prompted to edit te sudoers file,
add this line to the very end:

jenkins ALL= (ALL) NOPASSWD: ALL

Then save to sudoers,not sudoers.tmp, this is done to allow jenkins
to execute commands using sudo



The script files script3.sh and script4.sh are mainly used to setup the server to run the tests, and to deploy upon success using Jenkins.

Obviously, you need to run script3.sh and then script4.sh

IMPORTANT NOTICE:
Please note that Jenkins has been configured to run locally, after taking the TA's permission, because the remote server had issues with it's CPU Utilization and RAM, and would freeze when Jenkins would try to build the FrontEnd Files, so the automation of deployment has been performed locally after being granted this permission.




